#include <stdio.h>

#define INF 999 // Define infinity for edge weights

int main() {
    int n, i, j, u = 0, v_node = 0, min_edge; // Renamed v to v_node
    int cost[20][20], vis[20];
    int count = 0, total_cost = 0; // Renamed total to total_cost

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    if (n <= 0 || n > 20) {
        printf("Number of nodes must be between 1 and 20.\n");
        return 1;
    }
    
    // Initialize vis array
    for(i=0; i<n; i++) {
        vis[i] = 0;
    }


    printf("Enter the cost adjacency matrix (%d for no edge):\n", INF);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) { // Typically, 0 cost means no edge unless specified
                                          // The prompt says 999 for no edge, so 0 is a valid weight.
                                          // If cost[i][j] was meant to be INF if no edge, then this is fine.
            }
        }
    }

    vis[0] = 1; // Start with the first node (node 0)

    while (count < n - 1) {
        min_edge = INF;
        // u and v_node will store the edge (u, v_node) with minimum weight
        for (i = 0; i < n; i++) { // For every visited node i
            if (vis[i]) {
                for (j = 0; j < n; j++) { // For every unvisited node j
                    if (!vis[j] && cost[i][j] < min_edge) {
                        min_edge = cost[i][j];
                        u = i;
                        v_node = j;
                    }
                }
            }
        }

        if (min_edge == INF) { // No edge found to connect further, graph might be disconnected
            printf("Graph is disconnected. MST cannot be formed covering all nodes.\n");
            break;
        }
        
        vis[v_node] = 1;
        total_cost += min_edge;
        printf("%d - %d => %d\n", u, v_node, min_edge);
        count++;
    }

    if (count == n - 1) {
        printf("Total cost of Minimum Spanning Tree: %d\n", total_cost);
    } else if (n > 0 && count < n -1) { // n > 0 to avoid message for n=0 or n=1 if no edges printed
         printf("MST not fully formed. Edges found: %d\n", count);
    }


    return 0;
}