#include <stdio.h>

// Define INF, can't use const int in array dimensions or global initializers in C easily like C++
#define INF_VAL 999 // Renamed to avoid conflict if INF is defined elsewhere

// Global fixed-size arrays.
// If n can be larger, these need to be dynamic or larger.
int p_matrix[10][10]; // Renamed 'p' to 'p_matrix' to avoid conflict with potential pointer 'p'

int minVal(int a, int b) {
    return (a < b) ? a : b;
}

// Floyd-Warshall algorithm
// Takes the graph matrix and its size n
void floydWarshall(int current_graph[10][10], int num_nodes) {
    int k, i, j;

    for (k = 0; k < num_nodes; k++) {          // Intermediate vertex
        for (i = 0; i < num_nodes; i++) {      // Source vertex
            for (j = 0; j < num_nodes; j++) {  // Destination vertex
                // If path through k is shorter, update it.
                // Ensure that p[i][k] and p[k][j] are not INF_VAL to avoid overflow with INF_VAL + INF_VAL
                if (current_graph[i][k] != INF_VAL && current_graph[k][j] != INF_VAL) {
                    current_graph[i][j] = minVal(current_graph[i][j], current_graph[i][k] + current_graph[k][j]);
                }
            }
        }
    }
}

int main() {
    int a[10][10]; // Adjacency matrix for costs
    int n_nodes;   // Number of nodes, renamed from n
    int i, j;

    printf("Enter the number of nodes (max 10 for 0-indexed): ");
    scanf("%d", &n_nodes);

    if (n_nodes <= 0 || n_nodes > 10) {
        printf("Number of nodes must be between 1 and 10.\n");
        return 1;
    }

    printf("Enter the cost matrix (0 for self loop, %d for no direct edge/infinity):\n", INF_VAL);
    for (i = 0; i < n_nodes; i++) {
        for (j = 0; j < n_nodes; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    floydWarshall(a, n_nodes); // Pass matrix 'a' and its size

    printf("The resultant path matrix (all-pairs shortest paths) is:\n");
    for (i = 0; i < n_nodes; i++) {
        for (j = 0; j < n_nodes; j++) {
            if (a[i][j] == INF_VAL)
                printf("INF\t");
            else
                printf("%d\t", a[i][j]);
        }
        printf("\n");
    }

    return 0;
}