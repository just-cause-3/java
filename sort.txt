#include <stdio.h>
#include <stdlib.h> // For malloc/free if VLAs aren't used, and for potential rand()
#include <time.h>   // For clock()

// C-style swap function
void c_swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// ======================= Selection Sort =======================
void selectionSort(int arr[], int n) {
    int i, j, minIdx;
    for (i = 0; i < n - 1; i++) {
        minIdx = i;
        for (j = i + 1; j < n; j++)
            if (arr[j] < arr[minIdx])
                minIdx = j;
        if (minIdx != i)
            c_swap(&arr[i], &arr[minIdx]);
    }
}

// ======================= Merge Sort =======================
void merge(int array[], int left, int mid, int right) {
    int i, j, k;
    int leftSize = mid - left + 1;
    int rightSize = right - mid;

    // Create temporary arrays (VLAs - C99)
    int L[leftSize], R[rightSize];

    // Copy data to temporary arrays L[] and R[]
    for (i = 0; i < leftSize; i++)
        L[i] = array[left + i];
    for (j = 0; j < rightSize; j++)
        R[j] = array[mid + 1 + j];

    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = left; // Initial index of merged subarray

    // Merge the two subarrays back into array[left..right]
    while (i < leftSize && j < rightSize) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy any remaining elements of L[]
    while (i < leftSize) {
        array[k] = L[i];
        i++;
        k++;
    }

    // Copy any remaining elements of R[]
    while (j < rightSize) {
        array[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int array[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2; // To prevent overflow

        mergeSort(array, left, mid);        // Sort left half
        mergeSort(array, mid + 1, right);   // Sort right half
        merge(array, left, mid, right);     // Merge them
    }
}


// ======================= Quick Sort (Lomuto partition) =======================
int partition_lomuto(int arr[], int low, int high) {
    int pivot = arr[high]; // Pivot is the last element
    int i = low - 1;       // Index of smaller element
    int j;

    for (j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            c_swap(&arr[i], &arr[j]);
        }
    }
    c_swap(&arr[i + 1], &arr[high]); // Place pivot in correct position
    return i + 1; // Return partition index
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition_lomuto(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// ======================= Print Function =======================
void printArray(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// ======================= Main Function =======================
int main() {
    int n, i;
    clock_t start, end;
    double time_taken;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Number of elements must be positive.\n");
        return 1;
    }
    
    // Use VLA (C99). For C89, use dynamic allocation.
    int arr[n]; 
    // int *arr = (int*)malloc(n * sizeof(int));
    // if (arr == NULL) { printf("Memory allocation failed\n"); return 1; }


    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    // The original code applies all three sorts sequentially to the same array.
    // This means mergeSort and quickSort will operate on an already sorted array.
    // Time measured will be for the sequence of these operations.
    start = clock();
    selectionSort(arr, n);
    // If you want to test mergeSort on the original unsorted array,
    // you'd need to copy the original array first. Same for quickSort.
    // For now, following the original logic:
    mergeSort(arr, 0, n - 1);
    quickSort(arr, 0, n - 1);
    end = clock();
    time_taken = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Sorted array (after all three sorts):\n");
    printArray(arr, n);
    printf("Time taken for all sorting operations: %f seconds\n", time_taken);

    // if using malloc: free(arr);
    return 0;
}